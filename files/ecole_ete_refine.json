[
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "NOM_QR",
      "expression": "grel:value.toLowercase().replace(\"à\",\"a\").replace(\"â\",\"a\").replace(\"á\", \"a\").replace(\"ä\",\"a\").replace(\"è\",\"e\").replace(\"ê\",\"e\").replace(\"ë\",\"e\").replace(\"é\",\"e\").replace(\"ï\",\"i\").replace(\"î\",\"i\").replace(\"ô\",\"o\").replace(\"ö\",\"o\").replace(\"ü\",\"u\").replace(\"ù\",\"u\").replace(\"ç\",\"c\").replace(\"--\",\"-\").replace(\"  \", \"\").replace(\".\", \"\").replace(\" \", \"-\").replace(\"/\", \"-\").replace(\"–\", \"-\")",
      "onError": "keep-original",
      "repeat": true,
      "repeatCount": 10,
      "description": "Text transform on cells in column NOM_QR using expression grel:value.toLowercase().replace(\"à\",\"a\").replace(\"â\",\"a\").replace(\"á\", \"a\").replace(\"ä\",\"a\").replace(\"è\",\"e\").replace(\"ê\",\"e\").replace(\"ë\",\"e\").replace(\"é\",\"e\").replace(\"ï\",\"i\").replace(\"î\",\"i\").replace(\"ô\",\"o\").replace(\"ö\",\"o\").replace(\"ü\",\"u\").replace(\"ù\",\"u\").replace(\"ç\",\"c\").replace(\"--\",\"-\").replace(\"  \", \"\").replace(\".\", \"\").replace(\" \", \"-\").replace(\"/\", \"-\").replace(\"–\", \"-\")"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "NOM_ARROND",
      "expression": "grel:value.toLowercase().replace(\"à\",\"a\").replace(\"â\",\"a\").replace(\"á\", \"a\").replace(\"ä\",\"a\").replace(\"è\",\"e\").replace(\"ê\",\"e\").replace(\"ë\",\"e\").replace(\"é\",\"e\").replace(\"ï\",\"i\").replace(\"î\",\"i\").replace(\"ô\",\"o\").replace(\"ö\",\"o\").replace(\"ü\",\"u\").replace(\"ù\",\"u\").replace(\"ç\",\"c\").replace(\"--\",\"-\").replace(\"  \", \"\").replace(\".\", \"\").replace(\" \", \"-\").replace(\"/\", \"-\").replace(\"–\", \"-\")",
      "onError": "keep-original",
      "repeat": true,
      "repeatCount": 10,
      "description": "Text transform on cells in column NOM_ARROND using expression grel:value.toLowercase().replace(\"à\",\"a\").replace(\"â\",\"a\").replace(\"á\", \"a\").replace(\"ä\",\"a\").replace(\"è\",\"e\").replace(\"ê\",\"e\").replace(\"ë\",\"e\").replace(\"é\",\"e\").replace(\"ï\",\"i\").replace(\"î\",\"i\").replace(\"ô\",\"o\").replace(\"ö\",\"o\").replace(\"ü\",\"u\").replace(\"ù\",\"u\").replace(\"ç\",\"c\").replace(\"--\",\"-\").replace(\"  \", \"\").replace(\".\", \"\").replace(\" \", \"-\").replace(\"/\", \"-\").replace(\"–\", \"-\")"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "DATE_DECLARATION",
      "expression": "value.toDate()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column DATE_DECLARATION using expression value.toDate()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "DATE_INSP_VISPRE",
      "expression": "value.toDate()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column DATE_INSP_VISPRE using expression value.toDate()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "DATE_DEBUTTRAIT",
      "expression": "value.toDate()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column DATE_DEBUTTRAIT using expression value.toDate()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "DATE_FINTRAIT",
      "expression": "value.toDate()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column DATE_FINTRAIT using expression value.toDate()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "NBR_EXTERMIN",
      "expression": "value.toNumber()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column NBR_EXTERMIN using expression value.toNumber()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "COORD_X",
      "expression": "value.toNumber()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column COORD_X using expression value.toNumber()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "COORD_Y",
      "expression": "value.toNumber()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column COORD_Y using expression value.toNumber()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "NO_DECLARATION",
      "expression": "value.toNumber()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column NO_DECLARATION using expression value.toNumber()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "LONGITUDE",
      "expression": "value.toNumber()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column LONGITUDE using expression value.toNumber()"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "LATITUDE",
      "expression": "value.toNumber()",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column LATITUDE using expression value.toNumber()"
    },
    {
      "op": "core/row-removal",
      "engineConfig": {
        "facets": [
          {
            "type": "list",
            "name": "NO_DECLARATION",
            "expression": "facetCount(value, 'value', 'NO_DECLARATION') > 1",
            "columnName": "NO_DECLARATION",
            "invert": false,
            "omitBlank": false,
            "omitError": false,
            "selection": [
              {
                "v": {
                  "v": true,
                  "l": "true"
                }
              }
            ],
            "selectBlank": false,
            "selectError": false
          }
        ],
        "mode": "row-based"
      },
      "description": "Remove rows"
    },
    {
      "op": "core/column-split",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "columnName": "NOM_QR",
      "guessCellType": false,
      "removeOriginalColumn": false,
      "mode": "separator",
      "separator": "-",
      "regex": false,
      "maxColumns": 2,
      "description": "Split column NOM_QR by separator"
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [
          {
            "type": "list",
            "name": "NOM_QR 2",
            "expression": "isBlank(value)",
            "columnName": "NOM_QR 2",
            "invert": false,
            "omitBlank": false,
            "omitError": false,
            "selection": [
              {
                "v": {
                  "v": false,
                  "l": "false"
                }
              }
            ],
            "selectBlank": false,
            "selectError": false
          }
        ],
        "mode": "row-based"
      },
      "baseColumnName": "NOM_QR 1",
      "expression": "grel:value + \"-\"+ cells[\"NOM_QR 2\"].value",
      "onError": "set-to-blank",
      "newColumnName": "NOM_QR 3",
      "columnInsertIndex": 9,
      "description": "Create column NOM_QR 3 at index 9 based on column NOM_QR 1 using expression grel:value + \"-\"+ cells[\"NOM_QR 2\"].value"
    },
    {
      "op": "core/text-transform",
      "engineConfig": {
        "facets": [
          {
            "type": "list",
            "name": "NOM_QR 3",
            "expression": "isBlank(value)",
            "columnName": "NOM_QR 3",
            "invert": false,
            "omitBlank": false,
            "omitError": false,
            "selection": [
              {
                "v": {
                  "v": true,
                  "l": "true"
                }
              }
            ],
            "selectBlank": false,
            "selectError": false
          }
        ],
        "mode": "row-based"
      },
      "columnName": "NOM_QR 3",
      "expression": "grel:cells[\"NOM_QR 1\"].value",
      "onError": "keep-original",
      "repeat": false,
      "repeatCount": 10,
      "description": "Text transform on cells in column NOM_QR 3 using expression grel:cells[\"NOM_QR 1\"].value"
    },
    {
      "op": "core/column-rename",
      "oldColumnName": "NOM_QR 3",
      "newColumnName": "NOM_QUARTIER",
      "description": "Rename column NOM_QR 3 to NOM_QUARTIER"
    },
    {
      "op": "core/column-reorder",
      "columnNames": [
        "NO_DECLARATION",
        "DATE_DECLARATION",
        "DATE_INSP_VISPRE",
        "DATE_DEBUTTRAIT",
        "DATE_FINTRAIT",
        "NBR_EXTERMIN",
        "No_QR",
        "NOM_QR",
        "NOM_QUARTIER",
        "NOM_ARROND",
        "COORD_X",
        "COORD_Y",
        "LONGITUDE",
        "LATITUDE"
      ],
      "description": "Reorder columns"
    },
    {
      "op": "core/row-removal",
      "engineConfig": {
        "facets": [
          {
            "type": "list",
            "name": "NBR_EXTERMIN",
            "expression": "value",
            "columnName": "NBR_EXTERMIN",
            "invert": false,
            "omitBlank": false,
            "omitError": false,
            "selection": [],
            "selectBlank": true,
            "selectError": false
          }
        ],
        "mode": "row-based"
      },
      "description": "Remove rows"
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "DATE_DEBUTTRAIT",
      "expression": "grel:value.toString(\"yyyy\")",
      "onError": "set-to-blank",
      "newColumnName": "Annee_traitement",
      "columnInsertIndex": 4,
      "description": "Create column Annee_traitement at index 4 based on column DATE_DEBUTTRAIT using expression grel:value.toString(\"yyyy\")"
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "DATE_DEBUTTRAIT",
      "expression": "grel:value.toString(\"MM\")",
      "onError": "set-to-blank",
      "newColumnName": "Mois_traitement",
      "columnInsertIndex": 4,
      "description": "Create column Mois_traitement at index 4 based on column DATE_DEBUTTRAIT using expression grel:value.toString(\"MM\")"
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "DATE_DEBUTTRAIT",
      "expression": "grel:value.toString(\"dd\")",
      "onError": "set-to-blank",
      "newColumnName": "Jour_traitement",
      "columnInsertIndex": 4,
      "description": "Create column Jour_traitement at index 4 based on column DATE_DEBUTTRAIT using expression grel:value.toString(\"dd\")"
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [],
        "mode": "row-based"
      },
      "baseColumnName": "LATITUDE",
      "expression": "grel:\"https://elevation-api.io/api/elevation?points=(\" + value + \",\" + cells.LONGITUDE.value + \")\"",
      "onError": "set-to-blank",
      "newColumnName": "query_api",
      "columnInsertIndex": 17,
      "description": "Create column query_api at index 17 based on column LATITUDE using expression grel:\"https://elevation-api.io/api/elevation?points=(\" + value + \",\" + cells.LONGITUDE.value + \")\""
    },
    {
      "op": "core/row-removal",
      "engineConfig": {
        "facets": [
          {
            "type": "list",
            "name": "Annee_traitement",
            "expression": "value",
            "columnName": "Annee_traitement",
            "invert": false,
            "omitBlank": false,
            "omitError": false,
            "selection": [
              {
                "v": {
                  "v": "2010",
                  "l": "2010"
                }
              }
            ],
            "selectBlank": false,
            "selectError": false
          }
        ],
        "mode": "row-based"
      },
      "description": "Remove rows"
    },
    {
      "op": "core/column-addition-by-fetching-urls",
      "engineConfig": {
        "facets": [
          {
            "type": "list",
            "name": "Annee_traitement",
            "expression": "value",
            "columnName": "Annee_traitement",
            "invert": false,
            "omitBlank": false,
            "omitError": false,
            "selection": [
              {
                "v": {
                  "v": "2020",
                  "l": "2020"
                }
              }
            ],
            "selectBlank": false,
            "selectError": false
          }
        ],
        "mode": "row-based"
      },
      "baseColumnName": "query_api",
      "urlExpression": "grel:value",
      "onError": "set-to-blank",
      "newColumnName": "query_result",
      "columnInsertIndex": 18,
      "delay": 500,
      "cacheResponses": true,
      "httpHeadersJson": [
        {
          "name": "authorization",
          "value": ""
        },
        {
          "name": "user-agent",
          "value": "OpenRefine 3.4.1 [437dc4d]"
        },
        {
          "name": "accept",
          "value": "*/*"
        }
      ],
      "description": "Create column query_result at index 18 by fetching URLs based on column query_api using expression grel:value"
    },
    {
      "op": "core/column-addition",
      "engineConfig": {
        "facets": [
          {
            "type": "list",
            "name": "Annee_traitement",
            "expression": "value",
            "columnName": "Annee_traitement",
            "invert": false,
            "omitBlank": false,
            "omitError": false,
            "selection": [
              {
                "v": {
                  "v": "2020",
                  "l": "2020"
                }
              }
            ],
            "selectBlank": false,
            "selectError": false
          }
        ],
        "mode": "row-based"
      },
      "baseColumnName": "query_result",
      "expression": "grel:value.parseJson().elevations[0]['elevation']",
      "onError": "set-to-blank",
      "newColumnName": "elevation",
      "columnInsertIndex": 19,
      "description": "Create column elevation at index 19 based on column query_result using expression grel:value.parseJson().elevations[0]['elevation']"
    }
  ]